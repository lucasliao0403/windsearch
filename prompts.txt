# WindSearch LLM Prompts

## LOCATION_EXTRACTION_PROMPT
Extract the location from this weather query: "{query}"

Return ONLY a JSON object with this format:
{
  "location": "specific location name (city, region, landmark)"
}

Examples:
- "weather in San Francisco" → {"location": "San Francisco"}
- "temperature at Mount Everest" → {"location": "Mount Everest"}
- "what's the temp in Palo Alto this week" → {"location": "Palo Alto"}

## STATION_FILTERING_PROMPT
Given this weather query: "{query}"

Here are the {stationCount} nearest weather stations:
{stationsList}

Select the most relevant station numbers for this specific query. Consider:
- Query specificity (city vs region vs country)
- Geographic relevance and coverage
- Station location (coastal, inland, urban, rural, airport)
- Data quality indicators (network type, elevation)

Return ONLY a JSON array of station numbers (1-{stationCount}): [1, 3, 7, ...]

## WEATHER_ANALYSIS_PROMPT
Weather query: "{query}"

Station data:
{stationData}

Provide a 2-3 sentence summary of weather conditions based on the available data. Focus on temperature ranges, notable wind/pressure patterns, and regional variations. Be factual and concise - no markdown formatting.

Note: Use phrases like "recent conditions show" or "based on available data" rather than claiming "current" conditions if the data isn't from today.

## SONNET_SUMMARY_PROMPT
Create a concise weather summary for: "{query}"

Data from {stationCount} stations:
{detailedData}

Quick Analysis:
{haikusAnalysis}

Provide a clear, public-friendly summary with:

1. **Key Findings** (2-3 sentences): What the data shows about weather conditions
2. **Temperature & Conditions** (1 paragraph): Temperature ranges and general conditions
3. **Notable Patterns** (1 paragraph): Any interesting weather trends or variations

Use appropriate language for data freshness:
- If data is from today/yesterday: "Current conditions show..."
- If data is from past week: "Recent conditions indicate..."
- If data is older: "Available data from [timeframe] shows..."

Keep it conversational and accessible. Use specific numbers but explain what they mean for regular people. Total length should be under 200 words.

## QUERY_DATA_VALIDATION_PROMPT
You are a smart weather analysis validator. Today's date is {currentDate}.

User Query: "{query}"
Available Data:
{dataInfo}
Data Age: {dataAge} hours old
Total Points: {totalPoints}

Your job: Determine if this data can reasonably answer the user's query.

GUIDELINES - BE EXTREMELY LENIENT:
1. **Future Predictions**: Allow all short-term forecasting (up to 1-2 weeks) based on any recent trends
2. **Historical Analysis**: Accept ALL historical data for any past weather questions
3. **Current Conditions**: Data up to several months old is acceptable for "current" weather patterns
4. **Seasonal Queries**: Allow seasonal/monthly analysis with any available data
5. **Trend Analysis**: ANY data span can show meaningful trends and patterns
6. **General Weather**: Most weather queries can be answered with available historical context

ACCEPT almost everything including:
- "Weather tomorrow" (any recent data works for trends)
- "Will it rain next week" (historical patterns provide insights)
- "Weather in January" (any historical data works)
- "Current conditions" (data weeks or months old still provides context)
- "Temperature trends" (any data period works)
- "What's the weather like" (general questions work with any data)

REJECT ONLY if:
- Absolutely no data (0 points total)
- Data is completely corrupted/unreadable
- Query is completely unrelated to weather

DEFAULT: Always return isValid: true unless there's a critical blocker.

Respond with ONLY a JSON object:
{
  "isValid": boolean,
  "reason": "explanation if invalid"
}

## DATA_VALIDATION_PROMPT
You are a data quality validator for weather analysis. Today's date is 2025-09-21. Examine this weather data and determine if it's suitable for weather analysis.

Data timestamps and info:
{dataInfo}

Query: "{query}"

IMPORTANT:
- Data from 2025 is current data, not future data
- Be EXTREMELY lenient - almost always approve data unless there are critical issues
- Historical weather data is valuable for analysis
- Focus only on obvious data corruption, not recency

Only mark as invalid if:
1. Data is completely empty (0 data points)
2. Timestamps are clearly corrupted (like year 1970, 1900, or 2090+)
3. Data appears completely corrupted or nonsensical

ACCEPT data that is:
- Weeks, months, or even seasons old
- From different time periods
- Limited in quantity but still meaningful

Default to isValid: true unless there's a critical problem.

Respond with ONLY a JSON object:
{
  "isValid": boolean,
  "reason": "explanation if invalid",
  "confidence": "high/medium/low"
}